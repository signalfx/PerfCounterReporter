###############################################################################
# OS CPU & Processor Counters
###############################################################################

# Percentage of elapsed time the processor spends executing non-idle threads
#\Processor(_Total)\% Processor Time
\Processor(*)\% Processor Time

#split between privileged and user
#\Processor(_Total)\% Privileged Time
#\Processor(_Total)\% User Time
\Processor(*)\% Privileged Time
\Processor(*)\% User Time

# Number of threads waiting for CPU cycles, where < 12 per CPU is good/fair, 
#< 8 is better, < 4 is best
\System\Processor Queue Length

# This is the number of system calls being serviced by the CPU per second.
# By comparing the Processor's Interrupts/sec with the System Calls/sec we can
# get a picture of how much effort the system requires to respond to attached hardware.
# On a healthy system, the Interrupts per second should be negligible in comparison to
# the number of System Calls per second. When the system has to repeatedly call
# interrupts for service, it's indicative of a hardware failure.
\System\System Calls/sec

#Number of execution contexts switched in the last second, where >6000 is poor, 
#<3000 is good, and <1500 is excellent.
\System\Context Switches/sec

#If context switches/sec suddenly starts increasing however, it may be an 
#indicating of a malfunctioning device, especially if you are seeing a similar 
#jump in the Processor(_Total)\Interrupts/sec counter on your machine. 
#You may also want to check Processor(_Total)\% Privileged Time Counter and see 
#if this counter shows a similar unexplained increase, as this may indicate 
#problems with a device driver that is causing an additional hit on kernel mode 
#processor utilization. In this case you can drill down and maybe find the culprit 
#by examining the Process(instance)\% Processor Time counter for each process 
#instances running on your machine. 
\Processor(_Total)\Interrupts/sec
#\Processor(*)\Interrupts/sec

#If Processor(_Total)\Interrupts/sec does not correlate well with 
#System\Context Switches/sec however, your sudden jump in context switches may 
#instead mean that your application is hitting its scalability limit on your 
#particular machine and you may need to scale out your application (for example 
#by clustering) or possibly redesign how it handles user mode requests.


###############################################################################
# OS Memory & Paging Counters
###############################################################################

# Unused physical memory (not page file)
\Memory\Available MBytes

#Reads from hard disk per second to resolve hard pages.
\Memory\Pages Input/sec

#Amount of Page File in use, which indicates the server is substituting disk 
#space for memory.
\Paging File(*)\% Usage

#Highest %Usage metric since the last time the server was restarted.
\Paging File(*)\% Usage Peak

###############################################################################
# OS Disk & Misc
###############################################################################

#A key measure of disk latency representing the average time, in milliseconds, 
#of each write to disk, where non-cached writes ( > 20 poor, <20 fair, 
#<12 better,  <8 best) differ significantly from cached writes (> 4 poor, 
#<4 fair, <2 better, <1 best ). 
#\PhysicalDisk(_Total)\Avg. Disk sec/Write
\PhysicalDisk(*)\Avg. Disk sec/Write

#A key measure of disk latency representing the average time, in milliseconds, 
#of each read to disk where > 20 is poor, <20 is good/fair, <12 is better, <8 is best
#\PhysicalDisk(_Total)\Avg. Disk sec/Read
\PhysicalDisk(*)\Avg. Disk sec/Read
\PhysicalDisk(*)\Avg. Disk sec/Transfer

# Measuring the disk bytes/sec is important to track performance over time. This is
# especially useful for any data-hosting systems, such as a database.
\LogicalDisk(*)\Disk Read Bytes/sec
\LogicalDisk(*)\Disk Write Bytes/sec

# Measuring the disk IOPS is important for any scalable systems, since the disk can
# only handle so many operations at once. This can eventually lead to a slow-down in
# performance due to disk operation queuing. Monitoring IOPS is important for any
# data-hosting system, such as a database or website.
\LogicalDisk(*)\Disk Transfers/sec
\LogicalDisk(*)\Disk Reads/sec
\LogicalDisk(*)\Disk Writes/sec

#The number of bytes sent and received over a specific network adapter, including
# framing characters. Be sure to record the throughput of your SQL Server's NIC 
#card(s).  Watch for this value possibly exceeding the NIC's specifications, 
#especially when conducting large and/or multiple backups or copies to network drives.  
#A high-speed network and/or a NIC dedicated to admin processes often alleviates this 
#bottleneck. This counter is a sum of Network Interface\\Bytes Received/sec and 
#Network Interface\\Bytes Sent/sec.  In some situations, you may wish to determine 
#both inbound and outbound network traffic separately
\Network Interface(*)\Bytes Total/sec

# Bytes Received/sec is the rate at which bytes are received over each network adapter, 
# including framing characters. Network Interface\Bytes Received/sec is a subset of 
# Network Interface\Bytes Total/sec.
\Network Interface(*)\Bytes Received/sec

# Bytes Sent/sec is the rate at which bytes are sent over each network adapter, 
# including framing characters. Network Interface\Bytes Sent/sec is a subset of 
# Network Interface\Bytes Total/sec.
\Network Interface(*)\Bytes Sent/sec

# Current Bandwidth is an estimate of the current bandwidth of the network 
# interface in bits per second (BPS).  For interfaces that do not vary in 
# bandwidth or for those where no accurate estimation can be made, this value 
# is the nominal bandwidth.
\Network Interface(*)\Current Bandwidth

# Tracking the packets received over time can give you a good indication of the
# typical use of the system's network. A sudden spike or drop in network packets
# may be worth investigating further.
\Network Interface(*)\Packets Received/sec
\Network Interface(*)\Packets Sent/sec

# Measuring the number of packet errors is an important factor in network health. If
# there is a large spike in network errors, it usually means that your network is not
# performing at peak health and needs further exploration. A small number of errors
# is usually exceptable.
\Network Interface(*)\Packets Received Errors
\Network Interface(*)\Packets Outbound Errors

# Keeping track of dropped/discarded packets is an important indicator of overall
# network health. If there is a sudden spike in dropped packets, this is usually
# an indicator of a network misconfiguration, network traffic overload, network
# traffic congsestion, or a potential issue with the network device or driver. A small
# number of dropped packets is usually acceptable.
\Network Interface(*)\Packets Received Discarded
\Network Interface(*)\Packets Outbound Discarded

\LogicalDisk(*)\Free Megabytes
\LogicalDisk(*)\% Free Space
